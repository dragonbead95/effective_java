package role5;

import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

/**
 * 아래 isBabyBoomer 메소드는 어떤 사람이 베이비 붐 세대에 속하는지 아닌지를 알려주는 메서드이다.
 * 아래의 사례는 메서드를 호출할때마다 Calendar 객체 하나, TimeZone 객체 하나, Date 객체 두개를 쓸데 없이 생성하고 있다.
 * 아래와 같은 코드는 정적 초기화 블록(static initializer)를 통해 개선하는 것이 좋다.
 */
public class Person {
	private final Date birthDate = new Date();
	
	// 다른 필드와 메서드, 생성자는 생략
	
	// 이렇게 하면 안된다.
	public boolean isBabyBoomer()
	{
		// 생성 비용이 높은 객체를 쓸데없이 생성한다.
		Calendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
		gmtCal.set(1946, Calendar.JANUARY, 1, 0, 0, 0);
		Date boomStart = gmtCal.getTime();
		gmtCal.set(1965, Calendar.JANUARY, 1, 0, 0, 0);
		Date boomEnd = gmtCal.getTime();
		return birthDate.compareTo(boomStart)>=0 && birthDate.compareTo(boomEnd)<0;
	}
}

class Person2 {
	private final Date birthDate = new Date();
	// 다른 필드와 메서드, 생성자는 생략
	
	/**
	 * 베이비 붐 시대의 시작과 끝
	 */
	private static final Date BOOM_START;
	private static final Date BOOM_END;
	
	static {
		Calendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
		gmtCal.set(1946, Calendar.JANUARY, 1, 0, 0, 0);
		BOOM_START = gmtCal.getTime();
		gmtCal.set(1965, Calendar.JANUARY, 1, 0, 0, 0);
		BOOM_END = gmtCal.getTime();
	}
	
	public boolean isBabyBoomer()
	{
		return birthDate.compareTo(BOOM_START)>=0 && birthDate.compareTo(BOOM_END)<0;
	}
}
